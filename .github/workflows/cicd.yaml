name: CI/CD

on: [push]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    name: Build and test
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          default: true
          override: true

      - name: Add RC.exe to PATH
        run: |
          function Invoke-VSDevEnvironment {
              $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
              $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
              $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
            & "${env:COMSPEC}" /s /c "`"$Command`" -no_logo && set" | Foreach-Object {
                  if ($_ -match '^([^=]+)=(.*)') {
                      [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                  }
              }
          }
          Invoke-VSDevEnvironment
          Get-Command rc.exe | Format-Table -AutoSize

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose

      - name: Check formatting
        run: cargo fmt -- --check --config newline_style=Auto

      - name: Check clippy
        run: cargo clippy -- -D warnings

  build_release:
    needs: build_and_test
    name: Build release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # - target: x86_64-unknown-linux-gnu
          #   os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          default: true
          override: true

      - name: Add RC.exe to PATH
        run: |
          function Invoke-VSDevEnvironment {
              $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
              $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
              $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
            & "${env:COMSPEC}" /s /c "`"$Command`" -no_logo && set" | Foreach-Object {
                  if ($_ -match '^([^=]+)=(.*)') {
                      [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                  }
              }
          }
          Invoke-VSDevEnvironment
          Get-Command rc.exe | Format-Table -AutoSize

      - name: Build
        run: cargo build --verbose --release

      - name: Get Windows binary extension
        id: get_extension
        if: ${{ matrix.os == 'windows-latest' }}
        run: echo "::set-output name=extension::.exe"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: steam-screenshot-organizer${{ steps.get_extension.outputs.extension }}
          path: target/release/steam-screenshot-organizer${{ steps.get_extension.outputs.extension }}

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            target/release/steam-screenshot-organizer${{ steps.get_extension.outputs.extension }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
